/* --- Global & Page Structure --- */
.pageContainer {
  max-width: 600px;
  margin: 0 auto;
  padding: calc(var(--spacing-unit) * 3) calc(var(--spacing-unit) * 2);
  min-height: 100vh;
  box-sizing: border-box;
}

.title {
  text-align: center;
  color: var(--text-primary);
  font-size: 1.8em;
  font-weight: 600;
  margin-bottom: calc(var(--spacing-unit) * 3);
}

.dataSourceSelector {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: calc(var(--spacing-unit) * 2);
  margin-bottom: calc(var(--spacing-unit) * 3);
  padding: calc(var(--spacing-unit) * 1);
  background-color: rgba(255, 255, 255, 0.5);
  border-radius: var(--border-radius-md);
}

.dataSourceSelector label {
  display: flex;
  align-items: center;
  gap: calc(var(--spacing-unit) * 0.5);
  font-size: 0.9em;
  color: var(--text-secondary);
  cursor: pointer;
}

.dataSourceSelector input[type="radio"] {
  cursor: pointer;
  accent-color: var(--accent-warm);
}

.visibilityToggles {
  display: flex;
  justify-content: center;
  gap: var(--spacing-unit);
  margin-bottom: calc(var(--spacing-unit) * 3);
  flex-wrap: wrap;
}

.toggleButton {
  padding: calc(var(--spacing-unit) * 0.75) calc(var(--spacing-unit) * 1.5);
  font-size: 0.75em;
  font-weight: 500;
  cursor: pointer;
  border: 1px solid var(--accent-warm-light);
  border-radius: var(--border-radius-pill);
  background-color: transparent;
  color: var(--accent-warm);
  transition: background-color 0.2s ease, color 0.2s ease,
    border-color 0.2s ease;
  white-space: nowrap;
}

.toggleButton.toggleActive {
  background-color: var(--accent-warm);
  color: var(--bg-card);
  border-color: var(--accent-warm);
}

.toggleButton:hover {
  border-color: var(--accent-warm);
}

.toggleButton.toggleActive:hover {
  background-color: #d68f63;
  border-color: #d68f63;
}

.orderInfo {
  text-align: center;
  margin-bottom: calc(var(--spacing-unit) * 2);
  font-size: 0.85em;
  color: var(--text-secondary);
  background-color: rgba(255, 255, 255, 0.6);
  padding: calc(var(--spacing-unit) * 0.75) calc(var(--spacing-unit) * 1.5);
  border-radius: var(--border-radius-pill);
  display: inline-block;
  margin-left: auto;
  margin-right: auto;
  position: relative;
  left: 50%;
  transform: translateX(-50%);
  max-width: 90%;
  box-sizing: border-box;
}

/* --- Slider Structure & Controls --- */
.slidersArea {
  display: flex;
  flex-direction: column;
  gap: calc(var(--spacing-unit) * 3);
  overflow-anchor: none;
}

.sliderWrapper {
  background-color: var(--bg-card);
  border-radius: var(--border-radius-lg);
  padding: calc(var(--spacing-unit) * 2);
  box-shadow: 0 4px 15px var(--shadow-color);
  overflow: hidden;
  border: 1px solid transparent;
  position: relative; /* Needed for z-index/layout */
}

.controls {
  display: flex;
  justify-content: flex-end;
  gap: var(--spacing-unit);
  margin-bottom: calc(var(--spacing-unit) * 2);
  padding-bottom: calc(var(--spacing-unit) * 1.5);
  border-bottom: 1px solid var(--border-subtle);
}

/* MODIFY .controls */
.controls {
  display: flex;
  justify-content: space-between; /* Key change: space-between */
  align-items: center; /* Align items vertically */
  gap: var(--spacing-unit);
  margin-bottom: calc(var(--spacing-unit) * 1.5); /* Reduced margin slightly */
  padding-bottom: calc(var(--spacing-unit) * 1.5);
  border-bottom: 1px solid var(--border-subtle);
}

/* NEW: Group for right-aligned move buttons */
.moveButtonGroup {
  display: flex;
  gap: var(--spacing-unit);
  flex-shrink: 0; /* Prevent shrinking */
}

.controlButton {
  padding: calc(var(--spacing-unit) * 0.8) calc(var(--spacing-unit) * 1.2); /* Adjust padding */
  font-size: 0.85em;
  font-weight: 500;
  cursor: pointer;
  background-color: var(--accent-warm-light);
  color: var(--accent-warm);
  border: none;
  border-radius: var(--border-radius-pill);
  transition: background-color 0.2s ease, opacity 0.2s ease, transform 0.1s ease,
    color 0.2s ease;
  display: inline-flex; /* Helps align icon/text if used together */
  align-items: center;
  justify-content: center;
  gap: calc(var(--spacing-unit) * 0.5); /* Space between icon and text */
  line-height: 1; /* Prevent extra height */
}

.controlButton:hover {
  background-color: var(--accent-warm);
  color: var(--bg-card);
}

.controlButton:active {
  transform: scale(0.95);
}

.controlButton:disabled {
  /* Same disabled styles */
  opacity: 0.4;
  cursor: not-allowed;
  background-color: #e0e0e0;
  color: var(--text-secondary);
  transform: none;
}

/* Add this near other control styles */
.controlPlaceholder {
  /* Ensure it has some minimum width or visibility if needed */
  /* You might not need width if the button itself has padding/margins */
  /* Or ensure it doesn't collapse if empty: */
  min-width: 1px; /* Or adjust as needed */
  /* We hide the placeholder itself, it's just for layout */
  visibility: hidden;
  /* Match the button height if alignment looks off */
  /* height: [height of controlButton]; */
}

/* NEW: Specific style for the modal button */
.modalButton {
  background-color: rgba(0, 0, 0, 0.05); /* Subtler background */
  color: var(--text-secondary);
  padding: calc(var(--spacing-unit) * 0.8); /* Make it squarer if just icon */
  flex-shrink: 0; /* Prevent shrinking */
}

.modalButton:hover {
  background-color: rgba(0, 0, 0, 0.1);
  color: var(--text-primary);
}

/* Make icon slightly larger */
.modalButton svg {
  font-size: 1.2em;
}

.sliderTitle {
  margin-top: 0;
  margin-bottom: calc(var(--spacing-unit) * 2);
  font-size: 1.1em;
  color: var(--text-primary);
  font-weight: 600;
  text-align: center;
}

/* --- Swiper Styles --- */
.swiperInstance {
  --swiper-theme-color: var(--accent-warm);
  --swiper-navigation-color: var(--accent-warm);
  --swiper-navigation-size: 18px;

  width: 100%;
  border-radius: var(--border-radius-md);
  overflow: hidden;
  padding-left: 45px;
  padding-right: 45px;
  position: relative;
  margin-bottom: var(--spacing-unit);
  min-height: 100px; /* Adjust height for content */
}

.swiperInstance.lockedSwiper {
  opacity: 0.7;
}

/* Swiper Nav Buttons */
.swiperInstance .swiper-button-next,
.swiperInstance .swiper-button-prev {
  background: none;
  background-image: none;
  border: none;
  background-color: rgba(255, 255, 255, 0.85);
  border-radius: 50%;
  width: 38px;
  height: 38px;
  top: 50%;
  transform: translateY(-50%);
  box-shadow: 0 3px 8px rgba(100, 80, 70, 0.18);
  transition: background-color 0.2s ease, opacity 0.2s ease,
    box-shadow 0.2s ease;
  z-index: 10;
  cursor: pointer;
}

.swiperInstance .swiper-button-next::after,
.swiperInstance .swiper-button-prev::after {
  font-weight: bold;
}

.swiperInstance .swiper-button-prev {
  left: 8px;
}
.swiperInstance .swiper-button-next {
  right: 8px;
}

.swiperInstance .swiper-button-next:hover,
.swiperInstance .swiper-button-prev:hover {
  background-color: rgba(255, 255, 255, 1);
  box-shadow: 0 4px 10px rgba(100, 80, 70, 0.22);
}

.swiperInstance .swiper-button-disabled {
  opacity: 0.35 !important;
  cursor: not-allowed !important;
  pointer-events: none;
}

/* Swiper Pagination */
.swiperInstance .swiper-pagination {
  bottom: 8px !important;
  position: absolute;
  left: 0;
  width: 100%;
  text-align: center;
}

.swiperInstance .swiper-pagination-bullet {
  width: 7px;
  height: 7px;
  background-color: var(--accent-warm-light);
  opacity: 0.6;
  margin: 0 4px !important;
  transition: background-color 0.2s ease, opacity 0.2s ease, width 0.2s ease,
    height 0.2s ease;
  display: inline-block;
  border-radius: 50%;
}

.swiperInstance .swiper-pagination-bullet-active {
  background-color: var(--accent-warm);
  opacity: 1;
  width: 9px;
  height: 9px;
}

.swiperInstance.lockedSwiper .swiper-button-next,
.swiperInstance.lockedSwiper .swiper-button-prev,
.swiperInstance.lockedSwiper .swiper-pagination {
  display: none;
}

/* --- Slide Content Styling --- */
.slide {
  background-color: var(--accent-slider);
  display: flex;
  flex-direction: column;
  align-items: center;
  min-height: 150px; /* Match swiper min-height */
  height: 100%;
  border-radius: var(--border-radius-md);
  padding: calc(var(--spacing-unit) * 2);
  box-sizing: border-box;
  cursor: grab;
  overflow: hidden;
  text-align: center;
}

.slideTextContent {
  padding: var(--spacing-unit) 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: calc(var(--spacing-unit) * 0.5);
  width: 100%;
  box-sizing: border-box;
  margin-top: auto; /* Push text content towards center/bottom if slide is tall */
  margin-bottom: auto;
}

.slideTextContentWithIcon {
  flex-direction: row;
  justify-content: center;
  text-align: left;
}

.slideIcon {
  flex-shrink: 0;
  font-size: 1.4em;
  color: var(--accent-warm);
}

.slideName {
  font-weight: 600;
  font-size: 1.1em;
  color: var(--text-primary);
}

.slideSubText {
  font-size: 0.85em;
  color: var(--text-secondary);
  text-align: center;
}

.noData {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100px;
  color: var(--text-secondary);
  background-color: #f7f7f7;
  border: 1px dashed var(--border-subtle);
  border-radius: var(--border-radius-md);
  font-size: 0.9em;
  padding: calc(var(--spacing-unit) * 2);
  box-sizing: border-box;
}

/* --- Accordion Styles --- */
.accordionContainer {
  margin-top: calc(var(--spacing-unit) * 2);
  padding-top: calc(var(--spacing-unit) * 1.5);
  border-top: 1px solid var(--border-subtle);
}

.detailsButton {
  display: flex;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  background-color: transparent;
  border: none;
  padding: calc(var(--spacing-unit) * 0.5) 0;
  font-size: 0.95em;
  font-weight: 500;
  color: var(--text-primary);
  cursor: pointer;
  text-align: left;
}

.accordionIcon {
  display: inline-block;
  margin-left: var(--spacing-unit);
  font-size: 0.8em;
  transition: transform 0.3s ease;
  color: var(--text-secondary);
}

.accordionIconOpen {
  transform: rotate(180deg);
}

.detailsContentWrapper {
  overflow: hidden;
}

.detailsContent {
  padding: calc(var(--spacing-unit) * 1.5) calc(var(--spacing-unit) * 0.5);
  font-size: 0.85em;
  color: var(--text-secondary);
}

.detailsContent p {
  margin: 0 0 calc(var(--spacing-unit) * 0.75) 0;
  line-height: 1.5;
}
.detailsContent p:last-child {
  margin-bottom: 0;
}

.detailsContent strong {
  color: var(--text-primary);
  margin-right: 4px;
}

/* --- NEW: Modal Styles --- */
.modalOverlay {
  position: fixed;
  inset: 0; /* Replaces top/left/right/bottom: 0 */
  background-color: rgba(0, 0, 0, 0.65); /* Slightly darker overlay */
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  padding: var(--spacing-unit);
  box-sizing: border-box;
}

.modalContent {
  background-color: var(--bg-card);
  padding: calc(var(--spacing-unit) * 2) calc(var(--spacing-unit) * 2.5);
  border-radius: var(--border-radius-lg);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  max-width: 90%;
  width: 450px; /* Or adjust as needed */
  position: relative; /* For close button positioning */
  color: var(--text-primary);
  max-height: 85vh;
  overflow-y: auto; /* Scroll if content exceeds max-height */
}

.modalContent h2 {
  margin-top: 0;
  margin-bottom: calc(var(--spacing-unit) * 2);
  text-align: center;
  font-size: 1.3em;
  color: var(--text-primary);
  font-weight: 600;
}

.modalContent p {
  font-size: 0.95em;
  color: var(--text-secondary);
  text-align: center;
  margin-bottom: var(--spacing-unit); /* Add some bottom margin */
}

.modalCloseButton {
  position: absolute;
  top: calc(var(--spacing-unit) * 1);
  right: calc(var(--spacing-unit) * 1.2);
  background: transparent;
  border: none;
  font-size: 1.6em; /* Adjust size */
  font-weight: bold;
  color: var(--text-secondary);
  cursor: pointer;
  line-height: 1;
  padding: calc(
    var(--spacing-unit) * 0.5
  ); /* Add padding for easier clicking */
  border-radius: 50%;
  transition: color 0.2s ease, background-color 0.2s ease;
}

.modalCloseButton:hover {
  color: var(--text-primary);
  background-color: rgba(0, 0, 0, 0.05); /* Subtle hover background */
}

/* REMOVE OLD .visibilityToggles if it exists */

/* --- NEW: Swiper for Visibility Toggles Styles --- */
.visibilitySwiperContainer {
  margin-bottom: calc(var(--spacing-unit) * 3);
  padding: calc(var(--spacing-unit) * 0.5) 0;
  background-color: rgba(255, 255, 255, 0.6);
  border-radius: var(--border-radius-lg);
  overflow: hidden; /* Important for rounded corners + Swiper */
}

.visibilitySwiper {
  /* No fixed height needed, adjusts to content */
  padding: calc(var(--spacing-unit) * 0.5) var(--spacing-unit); /* Add some padding */
}

.visibilitySwiperSlide {
  display: inline-flex !important; /* Use inline-flex for items */
  align-items: center;
  width: auto !important; /* Let slide width be determined by content */
  cursor: grab;
  user-select: none; /* Prevent text selection during swipe */
}

.visibilityButton {
  /* Adapt styles from old .toggleButton or create new */
  padding: calc(var(--spacing-unit) * 0.75) calc(var(--spacing-unit) * 1.5);
  font-size: 0.8em; /* Slightly smaller perhaps */
  font-weight: 500;
  cursor: pointer;
  border: 1px solid var(--accent-warm-light);
  border-radius: var(--border-radius-pill);
  background-color: transparent;
  color: var(--accent-warm);
  transition: background-color 0.2s ease, color 0.2s ease,
    border-color 0.2s ease, opacity 0.2s ease;
  white-space: nowrap;
  opacity: 0.7; /* Dim non-active buttons slightly */
}

.visibilityButton.visibilityActive {
  background-color: var(--accent-warm);
  color: var(--bg-card);
  border-color: var(--accent-warm);
  opacity: 1; /* Fully opaque when active */
  font-weight: 600;
}

.visibilityButton:hover {
  border-color: var(--accent-warm);
  opacity: 1;
}

.visibilityButton.visibilityActive:hover {
  background-color: #d68f63; /* Slightly darker warm accent */
  border-color: #d68f63;
}

.visibilityArrow {
  margin: 0 calc(var(--spacing-unit) * 0.75); /* Space around arrow */
  font-size: 1.1em;
  color: var(--text-secondary);
  flex-shrink: 0; /* Prevent arrow from shrinking */
  line-height: 1;
  font-weight: bold;
}
/* --- END: Swiper Styles --- */

/* REMOVE .orderInfo Style */
/* .orderInfo { ... } */

/* Ensure slider wrapper padding isn't excessive if title is inside DynamicSlider now */
.sliderWrapper {
  /* Adjust padding if needed */
  padding: calc(var(--spacing-unit) * 1.5) calc(var(--spacing-unit) * 2);
}

/* Ensure DynamicSlider title H2 has appropriate margin if rendered inside it */
/* Add style if needed: e.g., .dynamicSliderTitle { margin-bottom: ... } */
