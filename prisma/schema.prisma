// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- ENUM Types ---
enum PartnerType {
  LEGAL_ENTITY
  NATURAL_PERSON
}

enum EntityState {
  ACTIVE    // Currently in use, latest version
  MODIFIED  // A previous version, superseded by a newer one
  DELETED   // Soft-deleted
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

// --- Core Auth Models (Single-Tenant) ---

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String

  userRoles     UserRole[]

  // Audit and State Fields
  entityState   EntityState @default(ACTIVE) @map("entity_state")
  createdById   String?     @map("created_by_id") // Could be self for initial creation, or an admin
  createdByIp   String?     @map("created_by_ip") @db.VarChar(45) // For IPv4/IPv6
  deletedById   String?     @map("deleted_by_id")
  deletedByIp   String?     @map("deleted_by_ip") @db.VarChar(45)
  deletedAt     DateTime?   @map("deleted_at")

  // Versioning Fields
  previousVersionId String?  @unique @map("previous_version_id")
  nextVersionId     String?  @unique @map("next_version_id")

  // Relations for Audit/Versioning
  createdBy         User?    @relation("UserCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: Cascade)
  deletedBy         User?    @relation("UserDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: Cascade)
  previousVersion   User?    @relation("UserPreviousVersion", fields: [previousVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nextVersion       User?    @relation("UserNextVersion", fields: [nextVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Supporting relations for the above FKs (Prisma needs these defined for one-to-one)
  userCreatorOfUser       User[] @relation("UserCreatedBy")
  userDeleterOfUser       User[] @relation("UserDeletedBy")
  userPreviousVersionOf   User?  @relation("UserNextVersion")
  userNextVersionOf       User?  @relation("UserPreviousVersion")

  // Relations for other entities this user audited
  createdPartners         Partner[]       @relation("PartnerCreatedBy")
  deletedPartners         Partner[]       @relation("PartnerDeletedBy")
  createdGoodsAndServices GoodsAndService[] @relation("GoodsCreatedBy")
  deletedGoodsAndServices GoodsAndService[] @relation("GoodsDeletedBy")

  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Role {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?   @db.Text

  userRoles     UserRole[]
  permissions   RolePermission[]

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("roles")
}

model UserRole {
  userId                       String  @map("user_id")
  roleId                       String  @map("role_id")
  restrictedTopLevelJournalId  String? @map("restricted_top_level_journal_id")

  user                       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role                       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  restrictedTopLevelJournal  Journal?  @relation("UserRoleRestrictedJournal", fields: [restrictedTopLevelJournalId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  assignedAt                 DateTime  @default(now()) @map("assigned_at")

  @@id([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id          String   @id @default(cuid())
  action      String   // e.g., "CREATE_PARTNER", "READ_ACTIVE_PARTNER", "APPROVE_PARTNER", "READ_PARTNER_HISTORY"
  resource    String   // e.g., "PARTNER", "GOODS_AND_SERVICE", "JOURNAL"
  description String?  @db.Text

  rolePermissions RolePermission[]

  @@unique([action, resource], map: "uq_permission_action_resource")
  @@map("permissions")
}

model RolePermission {
  roleId       String     @map("role_id")
  permissionId String     @map("permission_id")

  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  assignedAt   DateTime   @default(now()) @map("assigned_at")

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

// --- Core Business Entity Models (Now with Auditing) ---

model Journal {
  id                 String     @id @db.VarChar(100)
  name               String    @db.Text
  parentId           String?   @map("parent_id") @db.VarChar(100)
  isTerminal         Boolean   @default(false) @map("is_terminal")
  additionalDetails  Json?     @map("additional_details") @db.JsonB

  parent             Journal?  @relation("JournalHierarchy", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Cascade, map: "fk_journal_parent")
  children           Journal[] @relation("JournalHierarchy")

  journalPartnerLinks  JournalPartnerLink[]
  journalGoodLinks     JournalGoodLink[]
  userRoleRestrictions UserRole[]         @relation("UserRoleRestrictedJournal")

  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@map("journals")
}

model Partner {
  id                  BigInt        @id @default(autoincrement()) @db.BigInt
  partnerType         PartnerType   @map("partner_type")
  name                String        @db.Text
  notes               String?       @db.Text
  logoUrl             String?       @map("logo_url") @db.VarChar(255)
  photoUrl            String?       @map("photo_url") @db.VarChar(255)
  isUs                Boolean?      @default(false) @map("is_us")
  registrationNumber  String?       @map("registration_number") @db.VarChar(100)
  taxId               String?       @map("tax_id") @db.VarChar(100)
  bioFatherName       String?       @map("bio_father_name") @db.VarChar(100)
  bioMotherName       String?       @map("bio_mother_name") @db.VarChar(100)
  additionalDetails   Json?         @map("additional_details") @db.JsonB

  journalPartnerLinks JournalPartnerLink[]

  // Audit, State, and Workflow Fields
  entityState       EntityState     @default(ACTIVE) @map("entity_state")
  approvalStatus    ApprovalStatus  @default(PENDING) @map("approval_status")
  createdById       String          @map("created_by_id")
  createdByIp       String?         @map("created_by_ip") @db.VarChar(45)
  deletedById       String?         @map("deleted_by_id")
  deletedByIp       String?         @map("deleted_by_ip") @db.VarChar(45)
  deletedAt         DateTime?       @map("deleted_at")

  // Versioning Fields
  previousVersionId BigInt?  @unique @map("previous_version_id")
  nextVersionId     BigInt?  @unique @map("next_version_id")

  // Relations for Audit/Versioning
  createdBy         User     @relation("PartnerCreatedBy", fields: [createdById], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy         User?    @relation("PartnerDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: Cascade)
  previousVersion   Partner? @relation("PartnerPreviousVersion", fields: [previousVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nextVersion       Partner? @relation("PartnerNextVersion", fields: [nextVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  partnerPreviousVersionOf   Partner?  @relation("PartnerNextVersion")
  partnerNextVersionOf       Partner?  @relation("PartnerPreviousVersion")

  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @updatedAt @map("updated_at")

  @@map("partners")
}

model TaxCode {
  id          Int     @id @default(autoincrement())
  code        String  @unique @db.VarChar(50)
  description String? @db.Text
  rate        Decimal @db.Decimal(5, 4)

  goodsAndServices        GoodsAndService[]
  journalPartnerGoodLinks JournalPartnerGoodLink[] @relation("ContextualTaxForJPGLink")

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("tax_codes")
}

model UnitOfMeasure {
  id        Int     @id @default(autoincrement())
  code      String  @unique @db.VarChar(20)
  name      String  @db.VarChar(100)

  goodsAndServices GoodsAndService[]

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("units_of_measure")
}

model GoodsAndService {
  id                    BigInt    @id @default(autoincrement()) @db.BigInt
  referenceCode         String?   @map("reference_code") @db.VarChar(50)
  barcode               String?   @db.VarChar(50)
  taxCodeId             Int?      @map("tax_code_id")
  typeCode              String?   @map("type_code") @db.VarChar(25)
  label                 String    @db.VarChar(255)
  description           String?   @db.Text
  unitCodeId            Int?      @map("unit_code_id")
  stockTrackingMethod   String?   @map("stock_tracking_method") @db.VarChar(50)
  packagingTypeCode     String?   @map("packaging_type_code") @db.VarChar(25)
  photoUrl              String?   @map("photo_url") @db.VarChar(255)
  additionalDetails     Json?     @map("additional_details") @db.JsonB

  taxCode               TaxCode?        @relation(fields: [taxCodeId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  unitOfMeasure         UnitOfMeasure?  @relation(fields: [unitCodeId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  journalGoodLinks        JournalGoodLink[]
  journalPartnerGoodLinks JournalPartnerGoodLink[]

  // Audit, State, and Workflow Fields
  entityState       EntityState     @default(ACTIVE) @map("entity_state")
  approvalStatus    ApprovalStatus  @default(PENDING) @map("approval_status")
  createdById       String          @map("created_by_id")
  createdByIp       String?         @map("created_by_ip") @db.VarChar(45)
  deletedById       String?         @map("deleted_by_id")
  deletedByIp       String?         @map("deleted_by_ip") @db.VarChar(45)
  deletedAt         DateTime?       @map("deleted_at")

  // Versioning Fields
  previousVersionId BigInt?  @unique @map("previous_version_id")
  nextVersionId     BigInt?  @unique @map("next_version_id")

  // Relations for Audit/Versioning
  createdBy         User     @relation("GoodsCreatedBy", fields: [createdById], references: [id], onDelete: Restrict, onUpdate: Cascade)
  deletedBy         User?    @relation("GoodsDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: Cascade)
  previousVersion   GoodsAndService? @relation("GoodsPreviousVersion", fields: [previousVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nextVersion       GoodsAndService? @relation("GoodsNextVersion", fields: [nextVersionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  goodsPreviousVersionOf   GoodsAndService?  @relation("GoodsNextVersion")
  goodsNextVersionOf       GoodsAndService?  @relation("GoodsPreviousVersion")


  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")

  @@map("goods_and_services")
}

// --- Linking Tables ---

model JournalPartnerLink {
  id                  BigInt    @id @default(autoincrement()) @db.BigInt
  journalId           String    @map("journal_id") @db.VarChar(100)
  partnerId           BigInt    @map("partner_id") @db.BigInt
  partnershipType     String?   @map("partnership_type") @db.VarChar(50)
  exoneration         Boolean?  @default(false)
  periodType          String?   @map("period_type") @db.VarChar(50)
  dateDebut           DateTime? @map("date_debut") @db.Date
  dateFin             DateTime? @map("date_fin") @db.Date
  documentReference   String?   @map("document_reference") @db.VarChar(200)

  journal             Journal   @relation(fields: [journalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  partner             Partner   @relation(fields: [partnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  journalPartnerGoodLinks JournalPartnerGoodLink[]

  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  @@unique([journalId, partnerId, partnershipType], map: "uq_journal_partner_type")
  @@map("journal_partner_links")
}

model JournalGoodLink {
  id          BigInt   @id @default(autoincrement()) @db.BigInt
  journalId   String   @map("journal_id") @db.VarChar(100)
  goodId      BigInt   @map("good_id") @db.BigInt

  journal     Journal         @relation(fields: [journalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  good        GoodsAndService @relation(fields: [goodId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([journalId, goodId], map: "uq_journal_good")
  @@map("journal_good_links")
}

model JournalPartnerGoodLink {
  id                      BigInt    @id @default(autoincrement()) @db.BigInt
  journalPartnerLinkId    BigInt    @map("journal_partner_link_id") @db.BigInt
  goodId                  BigInt    @map("good_id") @db.BigInt
  descriptiveText         String?   @map("descriptive_text") @db.Text
  contextualTaxCodeId     Int?      @map("contextual_tax_code_id")

  journalPartnerLink      JournalPartnerLink @relation(fields: [journalPartnerLinkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  good                    GoodsAndService    @relation(fields: [goodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  contextualTaxCode       TaxCode?           @relation("ContextualTaxForJPGLink", fields: [contextualTaxCodeId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  createdAt               DateTime           @default(now()) @map("created_at")
  updatedAt               DateTime           @updatedAt @map("updated_at")

  @@unique([journalPartnerLinkId, goodId], map: "uq_jp_link_good")
  @@map("journal_partner_good_links")
}